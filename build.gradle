import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

import java.util.jar.JarFile

plugins {
    id 'maven-publish'
    id 'java'
    id 'idea'
    id "com.gradleup.shadow" version "9.0.0-beta4"
    id "io.freefair.lombok" version "8.13.1"
}

group = 'net.itsthesky'

// Semantic Versioning
def major = '4'
def minor = '26'
def patch = '0'

def channel = ''
def channelVersion = ''

version = major + '.' + minor + '.' + patch + (channel ? '-' + channel + channelVersion : '')

repositories {
    mavenCentral()
    mavenLocal()
    maven { url = 'https://repo.papermc.io/repository/maven-public/' }
    maven { url = 'https://oss.sonatype.org/content/groups/public/' }
    maven { url = 'https://jitpack.io' }
    maven { url = 'https://maven.enginehub.org/repo/' }
    maven { url = 'https://m2.dv8tion.net/releases' }
    maven { url = 'https://repo.skriptlang.org/releases' }
}

dependencies {
    shadow 'io.papermc.paper:paper-api:1.20.1-R0.1-SNAPSHOT'
    shadow 'com.github.SkriptLang:Skript:2.10.0'
    // Jetbrains Annotations
    shadow 'org.jetbrains:annotations:23.0.0'

    // Stable: net.dv8tion:JDA:5.2.3
    // Components V2: io.github.freya022:JDA:93b3e7abb2
    implementation 'net.dv8tion:JDA:6.0.0-rc.5'

    // bStats
    implementation 'org.bstats:bstats-bukkit:3.0.2'

    // Class manipulation
    implementation 'net.bytebuddy:byte-buddy:1.14.10'
    implementation 'net.bytebuddy:byte-buddy-agent:1.14.10'

    // Lombok
    implementation 'org.projectlombok:lombok:1.18.28'
}

shadowJar {
    minimize()

    setArchiveFileName('DiSky ' + version + '.jar')

    // We currently cannot relocate JDA, as its default package is
    // used over modules and more. However, as DiSky should be the only
    // plugin using JDA, this should not be a problem.

    // relocate('net.dv8tion.jda', 'net.itsthesky.disky.jda')

    relocate('org.bstats', 'net.itsthesky.disky.bstats')
}

task removeClassPath {
    doLast {
        def jarFile = file("${buildDir}/libs/DiSky ${version}.jar")

        // Créer un jar temporaire
        def tempJar = new File(temporaryDir, "temp.jar")
        def manifestFile = new File(temporaryDir, "MANIFEST.MF")
        manifestFile.parentFile.mkdirs()

        // Lire le manifest existant
        def origManifest = new JarFile(jarFile).manifest

        // Créer un nouveau manifest sans Class-Path
        def newManifest = new StringBuilder()
        origManifest.mainAttributes.entrySet().each { entry ->
            if (entry.key.toString() != "Class-Path") {
                newManifest.append("${entry.key}: ${entry.value}\n")
            }
        }
        manifestFile.text = newManifest.toString()

        // Créer le nouveau jar avec le manifest modifié
        ant.jar(destfile: tempJar.path, manifest: manifestFile) {
            zipfileset(src: jarFile) {
                exclude(name: 'META-INF/MANIFEST.MF')
            }
        }

        // Remplacer le jar original
        jarFile.delete()
        tempJar.renameTo(jarFile)
    }
}

shadowJar.finalizedBy removeClassPath

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

task sourceJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact(sourceJar)

            groupId = 'net.itsthesky'
            artifactId = 'DiSky'
            version = project.version
        }
    }

    repositories {
        maven {
            name = 'nexus'
            url = "https://gradle.itsthesky.net/repository/disky/"
            credentials {
                username = project.findProperty("nexusUsername") ?: System.getenv("NEXUS_USERNAME")
                password = project.findProperty("nexusPassword") ?: System.getenv("NEXUS_PASSWORD")
            }
        }
    }
}

compileJava.options.encoding = 'UTF-8'